Method 1) Using Spot Instances 

In spot Instances, here are some general estimates of the difference in emr cluster creation time between spot instances and on-demand instances:

For small clusters (e.g., 1-5 nodes):
     On-demand instances: 5-10 minutes
     Spot instances: 2-5 minutes (30-50% faster)
For medium clusters (e.g., 10-20 nodes):
     On-demand instances: 10-20 minutes
     Spot instances: 5-10 minutes (25-50% faster)
For large clusters (e.g., 50-100 nodes):
     On-demand instances: 30-60 minutes
     Spot instances: 15-30 minutes (25-50% faster)
Keep in mind that these are rough estimates, and the actual cluster creation time may vary depending on the specific use case like we have security group and bootstrap which will be additional increase in time for both cases.


Method 2) Reusing Same EMR Cluster
In Reusing Same Cluster, as a rough estimate, here are some time savings we can expect:

Creating a new EMR cluster: 10-15 minutes.
Reusing an existing EMR cluster: 1-5 minutes (mostly dependent on the time it takes to update the cluster configuration and restart the cluster)
By reusing an existing EMR cluster, we can save around 50-70% of the time it takes to create a new cluster. This can be a significant time savings, especially if we have a large cluster or need to create multiple clusters frequently.


Method 3) EMR on EKS

Running an EMR cluster on EKS (Elastic Kubernetes Service) can provide significant time savings compared to running an EMR cluster on EC2. 
Here's a breakdown of the estimated time savings-

EMR on EC2:

Cluster creation time: 10-15 minutes 
EMR on EKS:

Cluster creation time: 2-5 minutes (since EKS clusters are already provisioned and managed by AWS)
Node provisioning time: 1-3 minutes (since EKS uses containerized environments, which are faster to provision)
Total time: 3-8 minutes
By running an EMR cluster on EKS, we can save around 50-70% of the time it takes to create and provision an EMR cluster on EC2. This is because EKS clusters are already provisioned and managed by AWS, and containerized environments are faster to provision.
